## Use template from "https://github.com/zhao-lin-li/project_template_with_containers" to start
   a new project.

# In order to build a docker container, the files "Dockerfile" and "docker-compose.yml" are
  needed.

# To build an image based on the Dockerfile:
(project_dir)$ sudo docker build .

** To build an image based on the Dockerfile with a tag:
(project_dir)$ sudo docker build -t <tag_name> .

** If you're getting the error message, "Temporary failure resolving 'xxxxxxxxxx', the DNS
   servers might be blocked by your company.  (Solution from
   https://development.robinwinslow.uk/2016/06/23/fix-docker-networking-dns/).

   Step 1, find out the primary and secondary DNS server addresses:
   (home)$ nmcli dev show | grep 'IP4.DNS'

   Step 2, create a file "/etc/docker/daemon.json", save the following code inside the file.
   Replace "<IP4.DNS[1]>" and "<IP4.DNS[2]>" with the DNS server addresses found in Step 1,
   then restart all terminals:
   (home)$ sudo vi /etc/docker/daemon.json

   {                                                                          
      "dns": ["<IP4.DNS[1]>", "<IP4.DNS[2]>"]                                                                           
   } 

   Step 3, restart docker.  Then build the image again from scratch:
   (project_dir)$ sudo service docker restart
   (project_dir)$ sudo docker build --no-cache .

** If you're getting the error message, "ERROR: Couldn't connect to Docker daemon at 
   http+docker://localunixsocket - is it running?  If it's at a non-standard location, specify
   the URL with the DOCKER_HOST environment variable.":
   (project_dir)$ sudo service docker restart

# To enter in a specific docker container in the "docker-compose.yml" file w/ bash:
  (project_dir)$ sudo docker-compose run <container_name (first_line_under_"services")> bash


## USEFUL COMMANDS ##

# To start a container with assigned name in the background with the -d flag:
$ docker container run -d --name <container_name> <image:version> <command_run inside_container>

# To start a container and then launch a bash shell:
$ docker container run -it <image:version> bash

# To launch a bash shell in a running container:
$ docker container exec -it <container ID> bash

# To list all the running and exited containers (also can see port mappings):
$ docker container ls -a

# To run command in a running container:
$ docker container exec <container ID> <command_run inside_container>

# To display the PID of the processes inside container:
$ docker container top <container ID>

# To restart an exited container:
$ docker container start <container ID>

# To generate logs from the PID 1 process in a container:
$ docker container logs <container ID>

# To display only the last 5 lines of log generated from the PID 1 process in a container:
$ docker container logs --tail 5 <container ID>

# To watch the logs of the PID 1 process in the container as they are generated:
$ docker container logs -f <container ID>

# To inspect the container:
$ docker container inspect <container ID> | grep <words_to_look_for>

# To stop a container:
$ docker container stop <container ID>

# To delete container:
$ docker container rm -f <container ID>

# To remove all containers:
$ docker container rm -f $(docker container ls -aq)

# To see the changes to the image for a container:
$ docker container diff <container ID>

# To commit the changes to the image for the container:
$ docker container commit <container ID> <image:version>

# To list all the images:
$ docker image ls

# To see the history of an image:
$ docker image history <image_name>

# To download image from Docker Hub:
$ docker image pull <image:version>

# To login to Docker Hub:
$ docker login

# To re-tag existing image:
$ docker image tag <exist_image:exist_version> <Docker ID>/<new_image:new_version>

# To push image to Docker Hub:
$ docker image push <Docker ID>/<image:version>

# To build image w/ tag based on Dockerfile:
$ docker image build -t <tag_name> .

# To remove image:
$ docker image rm <image:version>

# To run container based on Dockerfile that has a CMD or ENTRYPOINT+CMD command:
$ docker container run <image:version>

# To run container based on Dockerfile that has only CMD and overwritting the CMD command:
$ docker container run <image:version> <command_run_inside_container_that overwrites_CMD_command>

# To run container based on Dockerfile that has ENTRYPOINT but no/replacing CMD default
  parameter:
$ docker container run <image:version> <default_parameter_for_ENTRYPOINT_command>

# To list all networks:
$ docker network ls

# To display network info:
$ docker network inspect <network_name>

# To create a new bridge network:
$ docker network create <network_name>

# To create a new bridge network by using the bridge driver:
$ docker network create --driver bridge <network_name>

# To start a container with assigned name and attach it to a specific network:
$ docker container run -d --name <container_name> --network <network_name> <image:version> <command_run inside_container>

# To attach running container to a specific network:
$ docker network connect <network_name> <container_name>

# To test connection between 2 containers:
$ docker container exec <container_name1> ping <container_name2>

# To start a container and forward host port to container port:
$ docker container run -d -p <host_port>:<container_port> <command_run_inside_container>

# To show port mapping:
$ docker container port <container_id>

# To show webpage in terminal:
$ curl -4 localhost:<port_name>

# To start a container and map all ports mentioned in the EXPOSE section if EXPOSE is used in
  Dockerfile:
$ docker container run -d -P <container_name>

# To start services (containers) that uses the docker-compose.yml file in a project dir (this
  pull images required in the docker-compose file from Docker Hub):
(project_dir)$ docker-compose up -d

# To list all services (containers) running in the project dir:
(project_dir)$ docker-compose ps

# To see logs generated from docker-compose:
(project_dir)$ docker-compose logs

# To watch the last 10 lines of log generated from docker-compose:
(project_dir)$ docker-compose logs --tail 10 --follow

# To start 2 (multiple) containers from the same service listed in the docker-compose file:
(project_dir)$ docker-compose scale <service_name_from_docker-compose_file=2

# To shutdown the app (also shutdown the containers) started by docker-compose:
(project_dir)$ docker-compose down

# To initialize a swarm on one node (one VM). Current node then becomes the manager node by
  default:
$ docker swarm init

# To list all the nodes in the swarm on manager node (this will not work on worker node):
(manager_node)$ docker node ls

# To create a service on the swarm:
(manager_node)$ docker service create --replicas <number_of_services> --name <service_name> <image:version> <command_to_run when_service_starts>

# To list processes started for the service:
$ docker service ps <service_name>

# On manager node, get the token to use to add worker nodes to the swarm:
(manager_node)$ docker swarm join-token worker

# To promote worker nodes to manager nodes on existing manager node:
(manager_node)$ docker node promote <node_name1> <node_name2>

# To see the log of the service on manager node:
(manager_node)$ docker service logs <service_name>

# To force-rebalance tasks on manager node (service tasks will be restarted):
(manager_node)$ docker service update --force <service_name>

# To change service (container) to read-only mode:
$ docker service update <container_name> --read-only

# To remove all existing services:
$ docker service rm $(docker service ls -q)

# To inspect system:
$ docker system info

# To watch action taken behind the screen by Docker engine:
$ docker system events

# To delete images that are pulled 6 months ago:
$ docker system prune --force
$ docker image prune --all --filter "until=4320h" --force

# To find out how much memory Docker is using and how much of this space can be reclaimed:
(project_dir)$ docker system df

# To reclaim all reclaimable space by removing all unused networks, containers, images and volumes:
(project_dir)$ docker system prune

# To delete a specific item:
(project_dir)$ docker image prune [--filter "<image_name>"]
(project_dir)$ docker container prune [--filter "<container_name>"]
(project_dir)$ docker volume prune [--filter "<volume_name>"]
(project_dir)$ docker network prune [--filter "<network_name>"]
