** If you have to create a new project, create a new repository on the website (ex. GitHub),
   then create a new branch if neccessary.

# Choose a directory you want the code to be stored at.  
(home)$ cd (directory_path)

** ex. If you need to clone the "Test" project from GitHub, so "Test" project will be stored at
   your local working directory "Documents":
(home)$ cd Desktop/Documents

# Clone the git repository:
(preferred_dir)$ git clone (http://xxxxxxx.git)

# Start edit or create files in your project.
(preferred_dir)$ cd (project_dir)
(project_dir)$ vi (file)

# Before you push your code, check the current branch you're in and what files you've
  created/modified:
(project_dir)$ git status

** Find out all the branch your project has on the server:
(project_dir)$ git branch -r

** Find out all the branch your project has locally on the your computer:
(project_dir)$ git branch -vv

** Delete branch that's locally on the computer:
(project_dir)$ git branch -D (branch_name)

** Delete remote feature branch on BitBucket:
(project_dir)$ git push origin :(feature-branch)

** Update the local list of remote branches:
(project_fir)$ git remote update origin --prune

# Change branch:
(project_dir)$ git checkout (branch_name)

# To add, commit and push file to GitHub:
(project_dir)$ git add (file1) (file2)
(project_dir)$ git commit -m "(commit_msg)"
(project_dir)$ git push

** To check what commits are made:
(project_dir)$ git log

** To get the updated version of the code from the remote repository, but not replacing the
   local working files:
(project_dir)$ git fetch origin

** To replace your local working files with the most updated version of the code from the remote
   repository:
(project_dir)$ git pull origin (branch_name)

** To pull code from submodules after cloning the project:
(project_dir)$ git submodule update --init

** To get the most updated version of the code from master branch without overwritting the 
   changes made in current branch.  First commit the changes, then rebase from master branch
   and fix any merge conflicts:
(project_dir)$ git fetch origin
(project_dir)$ git checkout master
(project_dir)$ git rebase origin/master
(project_dir)$ git checkout your_branch
(project_dir)$ git rebase master

** To show graph like gitx:
(project_dir)$ git log --graph --oneline --decorate

** To add changes by line like gitx:
(project_dir)$ git add -p <file_name>

# To update the to the commit itâ€™s pointing to:
(project_dir)$ git submodule update

# To assign submodule to the latest commit:
(project_dir)$ cd <submodule>
(project_dir/submodule_dir)$ git fetch origin
(project_dir/submodule_dir)$ git checkout master
(project_dir/submodule_dir)$ git rebase origin/master
(project_dir/submodule_dir)$ cd ..
(project_dir)$ git commit
(project_dir)$ git push

** To remove all untracked files:
(project_dir)$ git clean -d -f

** To create local branch:
(any_dir)$ git checkout <commit_id_if_need> -b <branch_name>

******************************************************************************************

# To create local repository on command line.  First, create a project folder on your local
  machine, then cd to your project directory:
(project_dir)$ git init

# To push your project (that has a .git file) up to the server, create a new repository on the
  website (ex. GitHub).  Follow the instruction shown on the next page on how to add an existed
  project to the remote repository.

*** origin = remote branch
    origin/branch = local copy of the remote branch
    
    $ git fetch origin          <-- always fetch from remote branch
    $ git checkout <branch>     <-- can only checkout local copy of the branch, so no need to
                                    specify "origin"
    $ git rebase origin/master  <-- rebase local copy of master from remote master branch
    $ git rebase master         <-- rebase from local copy of master
    $ git push origin           <-- always push to remote branch
